#!/bin/bash

echo "üîç Verifying EC2 Application Configuration"
echo "=========================================="

# Check if we're in the right directory
if [ ! -f compose.prod.yaml ]; then
    echo "‚ùå Error: Not in application directory or compose.prod.yaml not found"
    exit 1
fi

echo "‚úÖ Found compose.prod.yaml"

# Check if containers are running
echo ""
echo "üì¶ Checking container status..."
if docker-compose -f compose.prod.yaml ps | grep -q "Up"; then
    echo "‚úÖ Containers are running"
else
    echo "‚ùå Containers are not running"
    echo "Starting containers..."
    docker-compose -f compose.prod.yaml up -d
    sleep 15
fi

# Check which compose file is being used
echo ""
echo "üê≥ Docker Compose Configuration:"
echo "Using: compose.prod.yaml"
docker-compose -f compose.prod.yaml config --services

# Check Spring Boot profile using our custom endpoint
echo ""
echo "üå± Spring Boot Profile Check:"
if curl -s http://localhost:8080/api/config/info | grep -q "prod"; then
    echo "‚úÖ Application is running with 'prod' profile"
    echo "Configuration details:"
    curl -s http://localhost:8080/api/config/info | jq '.' 2>/dev/null || curl -s http://localhost:8080/api/config/info
else
    echo "‚ùå Application is NOT running with 'prod' profile"
    echo "Expected: application-prod.properties"
    echo "Current configuration:"
    curl -s http://localhost:8080/api/config/info | jq '.' 2>/dev/null || curl -s http://localhost:8080/api/config/info
fi

# Check environment variables
echo ""
echo "üîß Environment Variables Check:"
echo "Checking if environment variables are loaded..."

# Check specific environment variables
if docker-compose -f compose.prod.yaml exec app env | grep -q "SPRING_PROFILES_ACTIVE=prod"; then
    echo "‚úÖ SPRING_PROFILES_ACTIVE=prod is set"
else
    echo "‚ùå SPRING_PROFILES_ACTIVE=prod is NOT set"
fi

# Check MongoDB connection
echo ""
echo "üóÑÔ∏è MongoDB Connection Check:"
if docker-compose -f compose.prod.yaml exec app env | grep -q "MONGODB_URI"; then
    echo "‚úÖ MONGODB_URI is configured"
    docker-compose -f compose.prod.yaml exec app env | grep "MONGODB_URI"
else
    echo "‚ùå MONGODB_URI is NOT configured"
fi

# Check application properties
echo ""
echo "üìÑ Application Properties Check:"
echo "Expected files:"
echo "- src/main/resources/application.properties (base)"
echo "- src/main/resources/application-prod.properties (production profile)"

if [ -f src/main/resources/application.properties ]; then
    echo "‚úÖ application.properties found"
else
    echo "‚ùå application.properties NOT found"
fi

if [ -f src/main/resources/application-prod.properties ]; then
    echo "‚úÖ application-prod.properties found"
else
    echo "‚ùå application-prod.properties NOT found"
fi

# Check .env file
echo ""
echo "üîê Environment File Check:"
if [ -f .env ]; then
    echo "‚úÖ .env file found"
    echo "Environment variables in .env:"
    grep -E "(APP_NAME|LOG_LEVEL|MONGODB_URI|MAIL_|CSRF_)" .env || echo "No matching variables found"
else
    echo "‚ùå .env file NOT found"
fi

# Check application logs for configuration
echo ""
echo "üìã Application Logs (last 20 lines):"
docker-compose -f compose.prod.yaml logs --tail=20 app

# Health check
echo ""
echo "üè• Health Check:"
if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
    echo "‚úÖ Application is healthy"
else
    echo "‚ùå Application health check failed"
fi

echo ""
echo "‚úÖ Configuration verification completed!" 